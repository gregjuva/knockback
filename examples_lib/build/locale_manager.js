// Generated by CoffeeScript 1.3.1
var LocaleManager,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

LocaleManager = (function() {

  LocaleManager.name = 'LocaleManager';

  function LocaleManager(locale_identifier, translations_by_locale) {
    this.translations_by_locale = translations_by_locale;
    if (locale_identifier) {
      this.setLocale(locale_identifier);
    }
  }

  LocaleManager.prototype.get = function(string_id, parameters) {
    var arg, culture_map, index, string, _i, _len, _ref;
    if (this.locale_identifier) {
      culture_map = this.translations_by_locale[this.locale_identifier];
    }
    if (!culture_map) {
      return '';
    }
    string = culture_map.hasOwnProperty(string_id) ? culture_map[string_id] : '';
    if (arguments === 1) {
      return string;
    }
    _ref = Array.prototype.slice.call(arguments, 1);
    for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
      arg = _ref[index];
      string = string.replace("{" + index + "}", arg);
    }
    return string;
  };

  LocaleManager.prototype.getLocale = function() {
    return this.locale_identifier;
  };

  LocaleManager.prototype.setLocale = function(locale_identifier) {
    var culture_map, key, value, _results;
    this.locale_identifier = locale_identifier;
    Globalize.culture = Globalize.findClosestCulture(locale_identifier);
    this.trigger('change', this);
    culture_map = this.translations_by_locale[this.locale_identifier];
    if (!culture_map) {
      return;
    }
    _results = [];
    for (key in culture_map) {
      value = culture_map[key];
      _results.push(this.trigger("change:" + key, value));
    }
    return _results;
  };

  LocaleManager.prototype.getLocales = function() {
    var locales, string_id, value, _ref;
    locales = [];
    _ref = this.translations_by_locale;
    for (string_id in _ref) {
      value = _ref[string_id];
      locales.push(string_id);
    }
    return locales;
  };

  return LocaleManager;

})();

__extends(LocaleManager.prototype, Backbone.Events);
